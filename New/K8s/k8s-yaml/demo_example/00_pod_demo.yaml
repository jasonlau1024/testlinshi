---
# 实际生产环境中很少直接创建pod资源，基本都是通过资源控制器对pod进行管理。
apiVersion: v1      #必填，版本号
kind: Pod     #必填，资源类型
metadata:       #必填，元数据
  name: <name>-Depolyment     #必填，资源名称
  namespace: <namespace>    #Pod所属的命名空间
  labels:      #自定义标签
  - key: <value>     #自定义标签名字<key: value>
  annotations:        #自定义注解列表  
  - name: <string>        #自定义注解名字  
spec:         #必填，部署的详细定义
  containers:      #必填，定义容器列表
  - name: <name>     #必填，容器名称
    image: <image-name>    #必填，容器的镜像名称
    imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像
    command: [array]    #容器的启动命令列表，如不指定，使用打包时使用的启动命令
    args: [string]     #容器的启动命令参数列表
    workingDir: string     #选填，容器的工作目录
    env:       #容器运行前需设置的环境变量列表
    - name: string     #环境变量名称
      value: string    #环境变量的值
    ports:       #需要暴露的端口库号列表
    - name: string     #端口号名称
      containerPort: int   #容器需要监听的端口号
      hostPort: int    #容器所在主机需要监听的端口号，默认与Container相同
      protocol: string     #端口协议，支持TCP和UDP，默认TCP
    resources:       #建议填写，资源限制和请求的设置
      limits:      #资源限制的设置
        cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数
        memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数
      requests:      #资源请求的设置
        cpu: string    #Cpu请求，容器启动的初始可用数量
        memory: string     #内存请求，容器启动的初始可用数量
    volumeMounts:    #挂载到容器内部的存储卷配置
    - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名
      mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符
      readOnly: boolean    #是否为只读模式
    livenessProbe:     #建议填写，对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可
      exec:      #对Pod容器内检查方式设置为exec方式
        command: [string]  #exec方式需要制定的命令或脚本
      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port
        path: string
        port: number
        host: string
        scheme: string
        HttpHeaders:
        - name: string
          value: string
      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式
        port: number
      initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒
      timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒
      periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次
      successThreshold: 0 #处于失败状态时，探测操作至少连续多少次的成功才被认为是通过检测，显示为#success属性，默认值为1
      failureThreshold: 0 #处于成功状态时，探测操作至少连续多少次的失败才被视为是检测不通过，显示为#failure属性，默认值为3
    imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定
    - name: string
    hostNetwork: false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络
  volumes:       #在该pod上定义共享存储卷列表
  - name: string     #共享存储卷名称 （volumes类型有很多种）
    emptyDir: {}     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值
    hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录
    path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录
  - name: string     #共享存储卷名称
    secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部
      scretname: string  
      items:     
      - key: string     #选择secrets定义的某个key
        path: string    #文件内容路径
  - name: string     #共享存储卷名称
    configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部
      name: string
      items:
      - key: string     #选择configmap定义的某个key
        path: string     #文件内容路径
  - name: string     #共享存储卷名称
    persistentVolumeClaim:
      claimName: string     #类型为PVC的持久化存储卷
  affinity: # 亲和调度
    nodeAffinity: # 节点亲和调度
      requiredDuringSchedulingIgnoredDuringExecution: #硬亲和调度 或preferredDuringSchedulingIgnoredDuringExecution 软亲和调度
        nodeSelectorTerms: # 选择条件
          - matchExpressions: # 匹配规则
              - key: key
                operator: In
                values:
                  - values
  nodeSelector:  #设置NodeSelector表示将该Pod调度到包含这个label的node上
    name: string     #自定义标签名字<key: value>
  restartPolicy: [Always | Never | OnFailure] #Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod